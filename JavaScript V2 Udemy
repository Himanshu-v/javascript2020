Section 2 : /JS Fundamentals. (only important chapters)

 8 -/ Breif intro to JS:  
 ~High level (we don't have to worry about comlex stuff like memory management and concurrency - abstraction)
 ~Object oriented -based on objects for storing most kind of data.
 ~Multi paradigm - coded in different styles. FP PP OOP
 ~Programming language - set of instruction to the computer.						
 ~ Used to -  add features to a web page, make web pages dynamic and reactive, dom manipulation.
 ~Front end web app - Angular, React; Backend - NodeJs; Mobile application - React Native; 	
 ~There's nothing JS cannot do.
 ~Releases - ES2015 -> ES6   (EcmaScript)
					

 9  -/ Linking external JS file. - Usually at the end of the body tag.
 
 10 -/ Variable and values.
 ~ Value is the smallest unit of info in js, variable is a container/name given to memory location which stores that value for reusability.
 ~Conventions to name a variable - No reserved keyword, should be descriptive, should not start with number and special symbols except $ and _. 
 
 11 -/ Data Types.  
 ~A value can be object or primitives.   Primitives: Number (always floating point no. All numbers are just numbers) String,  boolean, undefined (default value), null, symbols, BigInt.
 ~JS is dynamically typed.
 
 12 -/ let const var in JS:   let and const were introduced in ES6.
 
 ~let - mutable. default value is undefined
 ~const - immutable. Initializing is must. 
 ~var - older way of declaring variables
 
 14 -/  Basic operators: 
 ~Math : +-*%, Logical - <>= etc.;  ++ --  grouping()
 15 -/ Operator precedence - MDN 
 
 17 -/ String and Template literals.
 
 ~can be in '' or ""
 ~multi line string is very easy.
 
 18 -/ if else.  
 ~Conditionals to tell what part of the code to execute based on some coditions.
 
 19 -/ Type conversion and type coercion.
 ~ TCon - manually conv one datatype to other.  var p = 25; var num = Number(p);   Original value of p is still '25'
 ~ TCoe - implicitly done by js
 
 21 -/ Truthy and Falsy Values: 
~ Falsy - Values that are considered false when evaluated in an if condition. - undefined, NaN, 0, '', NULL.
~ Truthy - NOT Falsy


22 -/ Equality Operator.  
~ 1) == : non strict equality operater, it performs type coercion before comparing e.g,  var y=22;  y == '22'? true: false;  // true
~ 2) === : Strict equality operator. No coercion e.g,  var y=22;  y === '22'? true: false; // false  - avoids unexpected bugs.

23 -/ Booleans logic: 
~ AND && , OR ||, NOT !.


24 -/ Logical Operator.
~ &&, ||, !

26 -/Switch Case Operators:    
~ S.C - To handle large no of conditions.

27 -/ Function Statements and Expressions:  

~Anything which does actions without producing/returning an immediate result is termed as Statements.  e.g., console.log('statement') , if else statement 	
~Function Expression:- Anything which returns single valued result is termed as expression
                     var insideAVariable = function(agr1, argN){return arg1+argN};  a+b; a&&b&&c; 'string itself is an expression'
		

28 -/ Ternary Operator.
~ T.O. - To write if else in single line.  
~ Using TO we can place the expression inside a template literal placeholder - ${a>b?a:b}

30 -/ JS Releases.  ES5 --> ES6 --> ESNext.


SECTION 2: Fundamentals Part 2

32 -/ Activating Strict mode 
~ Use as the first line of code in .js file - 'use strict';  
~It prevents the bugs which could be ignored without the use of strict mode. If forbids us to do certain things (using reserved keywords as variable namr) and show visible error in the console(as small as mismatching of variable name which is usually not indicated without strict mode and no error is shown either).


33 -/Functions.
~Functions acts like the container containing some lines of code which can be used/run/called/invoked multiple times again instead of writing them everytime 
~DRY - Don't repeat yourself. 	
        function calculateAge(birthYear )// no need to put var
		{
  		return 2020-birthYear;
		}

34 -/ Function Statements and Expressions:  
~Anything which does actions without producing/returning an immediate result are termed as Statements.  e.g., console.log('statement') 
  Can call a function declaration before it is defined.  (hoisting)
~Function Expression:- Anything which returns and evaluates into a single valued result is termed as expression
                     var insideAVariable = function(agr1, argN){return arg1+argN};  - Anonymous function.
 Cannot call a function expression before it is defined. - reference exception.		

35 -/Arrow function (ES6) 
~ var calculateAge = (ageYear) => 2020-ageYear;  - Anonymous function.
~ Arguments - Actual value while calling; 
~Parameters - Placeholders in funtion definition.
					 
39 -/ Arrays 
Array: Data structure storing multiple values with same or different datatypes in a single variable. 
~Initialise -  var arrName = ['mohit','jay','ram'];    var arrName = new Array['mohit','jay','ram'];
~Mutate- arrName[5] = 'gopi';  // ['mohit','jay','ram', empty, 'gopi'];       
~Different datatype - var ardiff = ['mohit',21,false];
~Array inside an array.   var arr = [1,2,3,[9,8,7],4 ]
~ Array of functions - var funcArr = [calculateAge(1895), ...] 
~Methods in array: 	push() /* adding at the end*/ , unshift() /* adding at the beginnig*/ , pop() /* removng at the end*/ , shift() /* removing at the beginnig*/ , IndexOf('x'); 						 
42 -/ Objects and Properties:   
~We can only select the values of an array with its index. In an object its values can be accessed with the help of keys. Each value of an object is termed as property.  Object canhold different type of data/datastructure
~Initialising an object:    1) With object literal   
	                            var car = { name: 'Rolls Royce', money : 1, family: [1,2,3]};   
								Accessing the values - car.name  or car['name']  
							2) With new keyword. 
							   var car = new Object();   car.name='RR'; car['money'] = 1;


43 -/ . vs []
~ Accessing the property of object with . notation (member access)-> car.name and [] (computed member access) -> car[name]
					 
					 


44 -/Objects and methods- 

~When a function is used as a property of object, it is called the method of that object. As Array has some methods it is also an object(of class Array). 
~Cannot use function declaration inside an object, olny function expression          
								//Passing the year as an argument.
								var car = { name: 'Rolls Royce', money : 1, family: [1,2,3], year: 1990, calculateAge: function(year){ return 2020-year;}  };   
								//implicitly using the objects property using this keyword
  	                           var car = { name: 'Rolls Royce', money : 1, family: [1,2,3], year: 1990, calculateAge: function(){ return 2020- this.year;}  };   
								//Setting a new property (age)with the help of function
    	                       var car = { name: 'Rolls Royce', money : 1, family: [1,2,3], year: 1990, calculateAge: function(){ return this.age =  2020- this.year;}  };   
							   
							   car['calculateAge']() -//30

46 -/ Loops and Iteration.  
~ for and while.   continue - skips the execution of code after it in the current iteration.  break - excutes the code brfore it and then breaks the iteration and loop.

			

SECTION 5 -/ DEVELOPERS SKILLS AND EDITOR SETUP

55 - Setting up prettier in VS code.
~Prettier is an opinionated code formatting tool, available as an extension in VSCode, which beautifies the code to make it look more readable.
~Functions of prettier can be configured in many ways - one is to create a .prettierrc configuration file in which an object structure can be use to customize the features.
~Now, instead of writing some code again and again we can use user's snippet option to create a global snippet file in which a snippet can be configure with some prefix which when typed in the script file suggests the snippet configured with it.

56 - Installing NodeJs and setting up a dev environment. 
~Live-server is used to reflect the changes on the browser in real time without reloading it.


SECTION 6 - HTML and CSS

~head tags used to contain the information and meta data of the html page, like title, language, charset and CSS etc.
~body tag contains the data to be displayed on the screen.
~img and input does not 
~anchor tag is called an inline element because it follows the line of previous element
~heading tag is called the block element because it creates the separate block for the data within.
~class and id attributes can be used in all the elements to identify and select them in css stying and dom manipulation. id is unique for an element class is not
~use - in naming the class and id inplace of camelcasing.
~div is used to create a generic box whereas form is used to create a semantic box

-/CSS
~element selector  by elementName{},  .class{}, #id {} - used to select element to be styled.
~style tags are used inside the head tag of html to write CSS within the file.
~link tag is used to link external CSS file to HTML file.  href attribute specifies the source file and rel attribute specifies the relation - styleSheets.
~font size and family are inherited by child elements.
~border is a shorthand property which allows to specify multiple properties like pixel, color etc. - Not inherited 

-/CSS BOX MODEL
~CBM defines the pre-defined format of any html page - width, height, padding, border, margins etc
~*{} - selects all the elements.
~ box-sizing: border-box - specifies to consider padding size when defining the width and height of the div/form.
~ Child selecer - parent id/class <space> id/class/name of element inside that parent.- it will select only the child of that parent

























		
