Section 3 : Stepping into the world of python. 

 16 -Introduction: Guido Van Rossum
 
 Python is an OO, multi-platform (linux, mac, windows), interpreted language. Named after comedy show - Monty python's flying circus.
 It supports all basic data types and also some complex ones such as lists and dictionary.
 Supports all type of programming paradigms. PP FP OOP.
 Data in py is strongly typed. Also it is dynamically typed in terms of assignment.
 
 17 - First Code.
 
 18 - Printing in python:   
 print() function can take multiple arguments of same/different type.    
 
 
 19 Strings:
 
 ~Literal means value of some type - numeric literal, string literals.
 ~input() funtions is used to enter the values from keyboard.
 ~for strings we can use '' as well as "".
 
 20 - Escape Character \
 
 ~\n - new line
 ~\t - tab
 ~\ to ecsape ' " or any special char in the string.  
 ~ """ """ no need to use escape character between tripple quotes. TQ is alse used to print the string over multiple lines without using \n.
 
 21 - More Escape Character in String:
 
 ~ In order to ecape \ in a string use one more \ before it. Or use the prefix 'r' before the quoted string to mark it as a Raw String.
  
 22 - Variables and types:  
 
 ~variable is a meaningful name given to a certain area of memory address which can store the values for computational/display purpose.
 ~type() gives the type of variable passed in as agrument. 

 23 - Strongly typed language:  
 
 ~ cannot combine/add/concate two different datatypes. No automatic type conversion.
 
 24 - Pythons numeric data types: 
 
 ~Sevaral built-in datatypes in py:- numeric, iterater, sequence, mapping, file, class, exception.
 ~Numeric: int, float, complex.  long in p2 is replaced with int in p3 as in p3 int has no size limit. for storing large no. at all.
 ~Python float has max 308 places after the decimal point, and minimun 308 digits before dec point. Float has 52 digits of precision. Decimal has more.
 
 25 - Numeric operators:
 ~ + - / *,   // - gives integer division(no dec point in results)
 
 26 - Expression
 ~Anything which can be calculated/evaluated to return a value/result.
 ~All literal values are expressions a=1. LHS of assignment is not an expression a is binded to the value 12, hence 12 is an expression.
 ~An expression can be made of different expressions
 
 27 - Operator precedence.
 ~BODMAS - Brackets, Order/exponent, Div/Multi, Add/Subs.
 
 28- String datatype-
 ~Sequence of characters. Index starting from 0.
 
 29-Negative indexing in String.
 ~ -1 index points to the last char of the string and goes on backward -2,...
 ~Can be obtained by substracting string length from the positive index.
 
 30 - Slicing - substring.  #str[inckusiveStart:exclusiveEnd]
 31 - Slicing with negative index.
 
 32 - Slicing with steps
 ~Default value of step is 1.
 ~ #str[inckusiveStart:exclusiveEnd:step]
 ~we can bind the result of slicing into a variable.
 
 33 -Slicing backward with negative steps.
 
 ~letters = "abcdefgh"
 ~print(letters[7:0:-1]) #not including a
 ~print(letters[::-1]) # cannot use -1 as the stop value because -1 indicates the last letter of the string.
 
 34 - Slicing idioms
 ~letters[-4:] - last 4 letters of string.
 ~letters[-1:] - last char of string.
 ~letters[:1]  + Gives the 1st char of string. Prevents the breaking of code is string is empty.
 
 35 - String operators
 ~ + concate; * multiply/repeat the string literal.;  "ab" in "tab" --> true

36 - String replacement field.
 ~ "age =" + 5 --> error.  To overcome this, we can coerce the numbers into string using str() function.
 ~ "age = " + str(5) --> "age = 5"
 ~ Above approach can be tedious hence py3 gives .format method to solve this.  
   ~nice = 2; print("I am {0}".format(nice))
   ~print("there are {0} days in {1}".format(31,"January"))
 
37 - String Formatting.
~     print("Number {0:2} Squared {1:<4} Cubed {2:^4}".format(i,i**2,i**3)) - ** --> exponent operator
 --> {placeholder:fieldwidth} - right aligned
 --> {placeholder:<fieldwidth} - < - left aligned
 --> {placeholder:^fieldwidth} , - ^ - centre.
 --> Precision (no of digits after the decimal) can also be defined for the floating point no.
     ~print("Pi is approximately {0:<72.54f}".format(22 / 7))  -- 72 - fieldwidth, 54f- precision
     ~print("Pi is approximately {0:12f}".format(22 / 7)) #when f is specified it prints 6 digits after the 

38 - formatting with f-string (> = py 3.6)
~ f prefix is used in place of .format.
~ print(f"pi is approx {22/7:12.50f}")  

39 - formatting with string interpolation (not recommended) (py2))  - same as c++ -> using %d


SECTION 4  PROGRAM FLOW CONTROL IN PYTHON

41 - Introduction to blocks and statement. 
~Unlike other languages, to make itself more readable, python does not use braces{} but distinguishes the blocks on the basis of indentation.
~There are different levels of indentation which allows blocks and blocks inside the another block.
~Conventionally, 4 spaces are used at a time
~Whenever a line ends with a : python interprets it as a block and the next lines of code will be indented to a level more thant that initial line. When the indentation is removed to the level of initial line, the block ends.

42 - if else Statements. 
~ if name=='himanshu':
    print(f"{name} is awesome")
  else:
    print('You can be too')    
~We can order the condition in if else as per our likes.
    
43 elif Statement. 
~ equivalent of else if - lets you check multiple conditions.  used between if and else statement.

45 More on if elif and else

48 - Conditional operators
~   <, <=, >, >=, ==, !=

50 - Using and or in conditions 
~for checking multiple conditions in ths same block. Can be used with or without parenthesis.

51 - Simplify chained expressions.

~ if age>=16 and age <= 65:  can be written as-->  if 16<= age <=65

52 - boolean expressions. 
~Cnditional operators and and, or, not returns boolean results as True or False.
~ variable can hold boolean value - isGood = True/False

53 Truthy values
~values that are considered to be false in the conditional statementsare called falsy values. 0,. false, empty sequence
~Not falsy = truthy.
~if only variable name is used in the conditions, python will expext a boolean value. 

54 - in and not in
~ To check for the character/number/sequence in another sequence.
~Also used in loops

57 - for loops
~executing the block multiple times.
~loop can be used on the Iterable objects -> sequences {strings, range, etc.)
~char.isupper() - checks the case of character. string.casefold() - to lower case. string.capitalize() - to upper case.

~Interrupting the iterations with:
 ~continue - skips the execution of code after it in the current iteration and moves to the next iteration.  
 ~break - excutes the code before it and then breaks the iteration and loop completely.


61 - Iterating over ranges.
~ for i in range(start, exclusiveEnd): - start to end with 1 step.
~ for i in range(exclusiveEnd):  - start defaults to 0.
~ for i in range(start, exclusiveEnd, step): - start to end with {step} steps.
~ for i in range(start, exclusiveEnd, -ve step): - traces backwards with {step} steps.  start > exclusiveEnd


65 Initializing the variable with None
~ None - constant which mean the variable holds nothing.

68 - while loop - similar to java





























 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 